{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\L\\xEDvia\\\\Desktop\\\\slg-hack\\\\pe-de-meia\\\\pe-de-meia-mobile\\\\App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SplashScreen } from 'expo';\nimport Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport TabApp from \"./src/navigation/TabApp\";\nimport InitialAppNavigation from \"./src/navigation/InitialAppNavigation\";\nimport useLinking from \"./src/navigation/useLinking\";\nexport default function App(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setLoadingComplete = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 1),\n      setInitialNavigationState = _React$useState4[0];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 1),\n      isLoggedIn = _React$useState6[0];\n\n  var containerRef = React.useRef();\n\n  var _useLinking = useLinking(containerRef),\n      getInitialState = _useLinking.getInitialState;\n\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              SplashScreen.preventAutoHide();\n              _context.t0 = setInitialNavigationState;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(getInitialState());\n\n            case 5:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread(_objectSpread({}, Ionicons.font), {}, {\n                'space-mono': require(\"./assets/fonts/SpaceMono-Regular.ttf\")\n              })));\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t2 = _context[\"catch\"](0);\n              console.warn(_context.t2);\n\n            case 14:\n              _context.prev = 14;\n              setLoadingComplete(true);\n              SplashScreen.hide();\n              return _context.finish(14);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 11, 14, 18]], Promise);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    if (isLoggedIn) {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }\n      }, Platform.OS === 'ios' && React.createElement(StatusBar, {\n        barStyle: \"default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 37\n        }\n      }), React.createElement(InitialAppNavigation, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }\n      }));\n    } else {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      }, Platform.OS === 'ios' && React.createElement(StatusBar, {\n        barStyle: \"default\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 37\n        }\n      }), React.createElement(TabApp, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }\n      }));\n    }\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  }\n});","map":{"version":3,"sources":["C:/Users/LÃ­via/Desktop/slg-hack/pe-de-meia/pe-de-meia-mobile/App.js"],"names":["React","SplashScreen","Font","Ionicons","TabApp","InitialAppNavigation","useLinking","App","props","useState","isLoadingComplete","setLoadingComplete","setInitialNavigationState","isLoggedIn","containerRef","useRef","getInitialState","useEffect","loadResourcesAndDataAsync","preventAutoHide","loadAsync","font","require","console","warn","hide","skipLoadingScreen","styles","container","Platform","OS","StyleSheet","create","flex","backgroundColor"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,YAAT,QAA6B,MAA7B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAEA,OAAOC,MAAP;AACA,OAAOC,oBAAP;AACA,OAAOC,UAAP;AAEA,eAAe,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA,wBACeR,KAAK,CAACS,QAAN,CAAe,KAAf,CADf;AAAA;AAAA,MAC1BC,iBAD0B;AAAA,MACPC,kBADO;;AAAA,yBAEGX,KAAK,CAACS,QAAN,EAFH;AAAA;AAAA,MAE1BG,yBAF0B;;AAAA,yBAGZZ,KAAK,CAACS,QAAN,CAAe,KAAf,CAHY;AAAA;AAAA,MAG1BI,UAH0B;;AAIjC,MAAMC,YAAY,GAAGd,KAAK,CAACe,MAAN,EAArB;;AAJiC,oBAKLT,UAAU,CAACQ,YAAD,CALL;AAAA,MAKzBE,eALyB,eAKzBA,eALyB;;AAQjChB,EAAAA,KAAK,CAACiB,SAAN,CAAgB,YAAM;AACpB,aAAeC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIjB,cAAAA,YAAY,CAACkB,eAAb;AAFJ,4BAKIP,yBALJ;AAAA;AAAA,+CAKoCI,eAAe,EALnD;;AAAA;AAAA;AAAA;AAAA;AAAA,+CAQUd,IAAI,CAACkB,SAAL,iCACDjB,QAAQ,CAACkB,IADR;AAEJ,8BAAcC,OAAO;AAFjB,iBARV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAcIC,cAAAA,OAAO,CAACC,IAAR;;AAdJ;AAAA;AAgBIb,cAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAV,cAAAA,YAAY,CAACwB,IAAb;AAjBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBAP,IAAAA,yBAAyB;AAC1B,GAvBD,EAuBG,EAvBH;;AAyBA,MAAI,CAACR,iBAAD,IAAsB,CAACF,KAAK,CAACkB,iBAAjC,EAAoD;AAClD,WAAO,IAAP;AACD,GAFD,MAEO;AACL,QAAIb,UAAJ,EAAgB;AACd,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEc,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyB,oBAAC,SAAD;AAAW,QAAA,QAAQ,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD5B,EAEE,oBAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAMD,KAPD,MAOO;AACL,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEH,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,IAAyB,oBAAC,SAAD;AAAW,QAAA,QAAQ,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD5B,EAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAMD;AACF;AACF;AAED,IAAMH,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE;AAFR;AADoB,CAAlB,CAAf","sourcesContent":["import React from 'react';\r\nimport { StyleSheet } from 'react-native';\r\nimport { SplashScreen } from 'expo';\r\nimport Font from 'expo-font';\r\nimport { Ionicons } from '@expo/vector-icons';\r\n\r\nimport TabApp from './src/navigation/TabApp';\r\nimport InitialAppNavigation from './src/navigation/InitialAppNavigation';\r\nimport useLinking from './src/navigation/useLinking';\r\n\r\nexport default function App(props) {\r\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\r\n  const [setInitialNavigationState] = React.useState();\r\n  const [isLoggedIn] = React.useState(false);\r\n  const containerRef = React.useRef();\r\n  const { getInitialState } = useLinking(containerRef);\r\n\r\n  // Load any resources or data that we need prior to rendering the app\r\n  React.useEffect(() => {\r\n    async function loadResourcesAndDataAsync() {\r\n      try {\r\n        SplashScreen.preventAutoHide();\r\n\r\n        // Load our initial navigation state\r\n        setInitialNavigationState(await getInitialState());\r\n\r\n        // Load fonts\r\n        await Font.loadAsync({\r\n          ...Ionicons.font,\r\n          'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf'),\r\n        });\r\n      } catch (e) {\r\n        // We might want to provide this error information to an error reporting service\r\n        console.warn(e);\r\n      } finally {\r\n        setLoadingComplete(true);\r\n        SplashScreen.hide();\r\n      }\r\n    }\r\n\r\n    loadResourcesAndDataAsync();\r\n  }, []);\r\n\r\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\r\n    return null;\r\n  } else {\r\n    if (isLoggedIn) {\r\n      return (\r\n        <View style={styles.container}>\r\n          {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\r\n          <InitialAppNavigation />\r\n        </View>\r\n      );\r\n    } else {\r\n      return (\r\n        <View style={styles.container}>\r\n          {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\r\n          <TabApp />\r\n        </View>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}